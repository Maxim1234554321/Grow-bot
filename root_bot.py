import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
import json
import os
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import requests
from bs4 import BeautifulSoup

TOKEN = "7831412310:AAFjmDiqwXpYGMWK5OXx7NVebQQtIuK1YZw"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
ADMIN_ID = "5890065908"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

STOCK_PATH = "stock.json"
USER_DATA_PATH = "user_data.json"
PRICES_PATH = "prices.json"

# --- –°–º–∞–π–ª–∏–∫–∏ ---
SEEDS_EMOJI = "üå±"
GEAR_EMOJI = "‚öôÔ∏è"
EGG_EMOJI = "ü•ö"
NEW_EMOJI = "‚ú®"
REMOVED_EMOJI = "üóëÔ∏è"
CHANGED_EMOJI = "üîÑ"
PRICE_EMOJI = "üí∞"

# --- –ù–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–∫–æ–≤ ---
SEEDS_STOCK_NAME = "üå±–°–µ–º–µ–Ω–∞"
GEAR_STOCK_NAME = "‚öôÔ∏è–ü—Ä–µ–¥–º–µ—Ç—ã"
EGG_STOCK_NAME = "ü•ö–Ø–π—Ü–∞"

# --- URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ ---
url = "https://vulcanvalues.com/grow-a-garden/stock"

# --- –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ ---
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    "Accept-Language": "en-US,en;q=0.9",
    "Referer": "https://www.google.com/"
}

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω –∏ —Ç–æ–≤–∞—Ä–æ–≤ ---
PRICES_DATA = {
    "SEEDS STOCK": {
        "Carrot": 10,
        "Strawberry": 50,
        "Blueberry": 400,
        "Tomato": 800,
        "Pineapple": "N/A",
        "Banana": 7000,
        "Caulflower": "N/A",
        "Watermelon": 2500,
        "Rafflesia": "N/A",
        "Green Apple": "N/A",
        "Avocado": "N/A",
        "Kiwi": "N/A",
        "Bell Pepper": "N/A",
        "Prickly Pear": "N/A",
        "Loquat": "N/A",
        "Feijoa": "N/A",
        "Pitcher": "N/A",
        "Sugar Apple": "N/A"
    },
    "GEAR STOCK": {
        "Watering Can": 50000,
        "Trowel": 100000,
        "Recall Wrench": 150000,
        "Basic Sprinkler": 25000,
        "Advanced Sprinkler": "N/A",
        "Godly Sprinkler": "N/A",
        "Magnifying Glass": 10000000,
        "Tanning Mirror": 1000000,
        "Master Sprinkler": "N/A",
        "Cleaning Spray": 15000000,
        "Favorite Tool": 20000000,
        "Harvest Tool": 30000000,
        "Friendship Pot": "N/A"
    },
    "EGG STOCK": {
        "Common Egg": 50000,
        "Common summer egg": "N/A",
        "Rare Summer Egg": "N/A",
        "Mythical Egg": "N/A",
        "Paradise Egg": "N/A",
        "Bee Egg": "N/A",
        "Bug Egg": 50000000
    }
}


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def load_user_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–∫–ª—é—á–∞—è –ø–æ–¥–ø–∏—Å–∫–∏) –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(USER_DATA_PATH):
        with open(USER_DATA_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

async def save_user_data(user_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    with open(USER_DATA_PATH, "w", encoding="utf-8") as f:
        json.dump(user_data, f, ensure_ascii=False, indent=2)

async def get_stock(shop_name):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–æ–∫ —Å –≤–µ–±-—Å–∞–π—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ–≥–æ."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–æ–∫ —Å –≤–µ–±-—Å–∞–π—Ç–∞
        html_content = await fetch_stock_data()
        if not html_content:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∫–µ."
        actual_stock = await parse_stock_data(html_content)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not actual_stock or shop_name not in actual_stock:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–∫–∞."

        emoji = {
            "SEEDS STOCK": SEEDS_EMOJI,
            "GEAR STOCK": GEAR_EMOJI,
            "EGG STOCK": EGG_EMOJI
        }.get(shop_name, "")

        shop_name_display = {
            "SEEDS STOCK": SEEDS_STOCK_NAME,
            "GEAR STOCK": GEAR_STOCK_NAME,
            "EGG STOCK": EGG_STOCK_NAME
        }.get(shop_name, shop_name)

        stock_text = f"<b>{emoji} {shop_name_display}:</b>\n"
        for item, amount in actual_stock[shop_name].items():
            price = PRICES_DATA.get(shop_name, {}).get(item, "–¶–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            stock_text += f"  -  {item} ({amount}) {PRICE_EMOJI}–¶–µ–Ω–∞: {price}\n"

        return stock_text

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–∫–∞: {e}")
        return f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

async def subscribe_user(user_id: int, shop_name: str):
    """–ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–æ–∫–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞."""
    user_data = await load_user_data()
    user_id_str = str(user_id)
    if user_id_str not in user_data:
        user_data[user_id_str] = {"subscriptions": []}

    if shop_name not in user_data[user_id_str]["subscriptions"]:
        user_data[user_id_str]["subscriptions"].append(shop_name)
        await save_user_data(user_data)
        return True
    return False  # –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω

async def unsubscribe_user(user_id: int, shop_name: str):
    """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–æ–∫–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞."""
    user_data = await load_user_data()
    user_id_str = str(user_id)
    if user_id_str in user_data and shop_name in user_data[user_id_str]["subscriptions"]:
        user_data[user_id_str]["subscriptions"].remove(shop_name)
        await save_user_data(user_data)
        return True
    return False  # –ù–µ –±—ã–ª –ø–æ–¥–ø–∏—Å–∞–Ω

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üëÄ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–æ–∫–∏üëÄ", callback_data="view_stock")
    builder.button(text="üîî–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏üîî", callback_data="manage_notifications")
    return builder.as_markup()

def get_stock_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text=f"{SEEDS_EMOJI} {SEEDS_STOCK_NAME}", callback_data="seeds_stock")
    builder.button(text=f"{GEAR_EMOJI} {GEAR_STOCK_NAME}", callback_data="gear_stock")
    builder.button(text=f"{EGG_EMOJI} {EGG_STOCK_NAME}", callback_data="egg_stock")
    builder.button(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")
    return builder.as_markup()

async def get_notification_management_keyboard(user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ (–ø–æ–¥–ø–∏—Å–∫–∞/–æ—Ç–ø–∏—Å–∫–∞)."""
    builder = InlineKeyboardBuilder()
    user_data = await load_user_data()
    user_id_str = str(user_id)

    if user_id_str in user_data:
        subscriptions = user_data[user_id_str].get("subscriptions", [])
    else:
        subscriptions = []

    buttons = []
    for shop_name in PRICES_DATA.keys():  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
        is_subscribed = shop_name in subscriptions
        if is_subscribed:
            text = f"‚úÖ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {shop_name}"
            callback_data = f"unsubscribe:{shop_name}"
        else:
            text = f"üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {shop_name}"
            callback_data = f"subscribe:{shop_name}"
        buttons.append(InlineKeyboardButton(text=text, callback_data=callback_data))

    # –†–∞–∑–±–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ –∫–∞–∂–¥–æ–π
    keyboard = [buttons[i:i + 1] for i in range(0, len(buttons), 1)]

    keyboard.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")])  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@router.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_data = await load_user_data()
    user_id_str = str(user_id)
    if user_id_str not in user_data:
        user_data[user_id_str] = {"subscriptions": []}  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await save_user_data(user_data)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–æ–∫–∞ –≤ Grow a Garden! üåø",
        reply_markup=get_main_keyboard()
    )

@router.callback_query(F.data == "view_stock")
async def view_stock_command(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=get_stock_keyboard())
    await callback.answer()

@router.callback_query(F.data == "seeds_stock")
async def view_seed_stock(callback: types.CallbackQuery):
    text = await get_stock("SEEDS STOCK")
    await callback.message.edit_text(text, reply_markup=get_stock_keyboard(), parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "gear_stock")
async def view_gear_stock(callback: types.CallbackQuery):
    text = await get_stock("GEAR STOCK")
    await callback.message.edit_text(text, reply_markup=get_stock_keyboard(), parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "egg_stock")
async def view_egg_stock(callback: types.CallbackQuery):
    text = await get_stock("EGG STOCK")
    await callback.message.edit_text(text, reply_markup=get_stock_keyboard(), parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
    await callback.answer()

@router.callback_query(F.data == "manage_notifications")
async def manage_notifications(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    keyboard = await get_notification_management_keyboard(user_id)
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", reply_markup=keyboard)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("subscribe:"))
async def subscribe_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    shop_name = callback.data.split(":")[1]
    if await subscribe_user(user_id, shop_name):
        await callback.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {shop_name}")
    else:
        await callback.answer(f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {shop_name}")
    keyboard = await get_notification_management_keyboard(user_id)
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("unsubscribe:"))
async def unsubscribe_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    shop_name = callback.data.split(":")[1]
    if await unsubscribe_user(user_id, shop_name):
        await callback.answer(f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {shop_name}")
    else:
        await callback.answer(f"–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {shop_name}")
    keyboard = await get_notification_management_keyboard(user_id)
    await callback.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", reply_markup=keyboard)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–∞ –ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–û–ö–ê ---
class StockFileHandler(FileSystemEventHandler):
    def __init__(self, bot: Bot):
        super().__init__()
        self.bot = bot
        self.last_modified = time.time()
        self.last_stock_data = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä—ë–º
        self.is_updating = False  # –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.update_interval = 30  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        # self.directory_to_watch = os.path.dirname(os.path.abspath(STOCK_PATH))
        print(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–∞")
        asyncio.create_task(self.periodic_update_stock())

    async def periodic_update_stock(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–æ–∫ —Å —Å–∞–π—Ç–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        while True:
            try:
                await self.update_stock()
                print(f"–°—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {self.update_interval} —Å–µ–∫—É–Ω–¥.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–∫–∞: {e}")
                if ADMIN_ID:
                    await self.bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–∫–∞: {e}")
            await asyncio.sleep(self.update_interval)

    async def fetch_stock_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∫–µ —Å —Å–∞–π—Ç–∞."""
        try:
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ HTTP –æ—à–∏–±–∫–∏
            return response.text
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–∞–π—Ç—É: {e}")
            return None

    async def parse_stock_data(self, html_content):
        """–ü–∞—Ä—Å–∏—Ç HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∫–µ."""
        if not html_content:
            return None

        soup = BeautifulSoup(html_content, "html.parser")

        shops = {}  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —Å–ª–æ–≤–∞—Ä—å
        grid_blocks = soup.select("div.grid > div")

        allowed_shops = ["SEEDS STOCK", "GEAR STOCK", "EGG STOCK"]

        for block in grid_blocks:
            title_tag = block.find("h2")
            if not title_tag:
                continue
            shop_name = title_tag.get_text(strip=True)

            if shop_name not in allowed_shops:
                continue

            shops[shop_name] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
            ul = block.find("ul")
            if not ul:
                continue
            for li in ul.find_all("li"):
                span = li.find("span")
                if not span:
                    continue
                name_part = span.find(text=True, recursive=False)
                qty_part = span.find("span", class_="text-gray-400")
                if name_part and qty_part:
                    name = name_part.strip()
                    qty_text = qty_part.get_text().strip()
                    qty = qty_text.replace('x', '').replace(' ', '')
                    try:
                        amount = int(qty) if qty.isdigit() else qty
                    except ValueError:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '{qty}' –≤ —á–∏—Å–ª–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{name}' –≤ –º–∞–≥–∞–∑–∏–Ω–µ '{shop_name}'. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'.")
                        amount = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    shops[shop_name][name] = amount  # –î–æ–±–∞–≤–ª—è–µ–º –≤ shop

        return shops  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å

    async def update_stock(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∫–µ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç."""
        if self.is_updating:
            print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫...")
            return

        self.is_updating = True
        try:
            html_content = await self.fetch_stock_data()
            if html_content:
                new_stock_data = await self.parse_stock_data(html_content)
                if new_stock_data:
                    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    messages_by_user = await self.compare_stock_data(self.last_stock_data, new_stock_data)
                    if messages_by_user:
                        user_data = await load_user_data()
                        for user_id_str, messages in messages_by_user.items():
                            user_id = int(user_id_str)
                            for message in messages:
                                try:
                                    await bot.send_message(user_id, message, parse_mode="HTML")
                                except Exception as e:
                                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                                    if ADMIN_ID:
                                        await self.bot.send_message(ADMIN_ID, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

                    self.last_stock_data = new_stock_data  # –û–±–Ω–æ–≤–ª—è–µ–º last_stock_data

        finally:
            self.is_updating = False

    async def compare_stock_data(self, old_data, new_data):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_data = await load_user_data()
        messages_by_user = {}

        for user_id_str, user_info in user_data.items():
            user_id = int(user_id_str)
            subscriptions = user_info.get("subscriptions", [])
            user_messages = []

            for shop_name in subscriptions: # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º –º–∞–≥–∞–∑–∏–Ω–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if shop_name not in PRICES_DATA: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –º–∞–≥–∞–∑–∏–Ω –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
                    continue

                old_shop = old_data.get(shop_name, {})  # –î–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å—Ç–æ–∫–∞ (—Ö—Ä–∞–Ω–∏–º –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞)
                new_shop = new_data.get(shop_name, {})  # –î–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–∫–∞ (—Å —Å–∞–π—Ç–∞)

                shop_emoji = {"SEEDS STOCK": SEEDS_EMOJI, "GEAR STOCK": GEAR_EMOJI, "EGG STOCK": EGG_EMOJI}.get(shop_name, "")
                shop_name_display = {"SEEDS STOCK": SEEDS_STOCK_NAME, "GEAR STOCK": GEAR_STOCK_NAME, "EGG STOCK": EGG_STOCK_NAME}.get(shop_name, shop_name)
                shop_message = f"{shop_emoji} <b>{shop_name_display}:</b>\n"
                item_changes = False # –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å—Ç–æ–∫–µ
                for item_name, price in PRICES_DATA[shop_name].items():
                    old_amount = old_shop.get(item_name)
                    new_amount = new_shop.get(item_name)

                    if old_amount != new_amount:
                        item_changes = True
                        emoji = NEW_EMOJI if old_amount is None else REMOVED_EMOJI if new_amount is None else CHANGED_EMOJI
                        if old_amount is None:
                            shop_message += f"   {NEW_EMOJI} –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {item_name} ({new_amount}) {PRICE_EMOJI}–¶–µ–Ω–∞: {price}\n"
                        elif new_amount is None:
                            shop_message += f"   {REMOVED_EMOJI} –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω: {item_name}\n"
                        else:
                            shop_message += f"   {CHANGED_EMOJI} {item_name}: {old_amount} -> {new_amount} {PRICE_EMOJI}–¶–µ–Ω–∞: {price}\n"

                if item_changes: # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
                    user_messages.append(shop_message)

            if user_messages:
                messages_by_user[user_id_str] = user_messages

        return messages_by_user

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–æ–∫–µ —Å —Å–∞–π—Ç–∞ ---
async def fetch_stock_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∫–µ —Å —Å–∞–π—Ç–∞."""
    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ HTTP –æ—à–∏–±–∫–∏
        return response.text
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–∞–π—Ç—É: {e}")
        return None

async def parse_stock_data(html_content):
    """–ü–∞—Ä—Å–∏—Ç HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–æ–∫–µ."""
    if not html_content:
        return None

    soup = BeautifulSoup(html_content, "html.parser")

    shops = {}  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —Å–ª–æ–≤–∞—Ä—å
    grid_blocks = soup.select("div.grid > div")

    allowed_shops = ["SEEDS STOCK", "GEAR STOCK", "EGG STOCK"]

    for block in grid_blocks:
        title_tag = block.find("h2")
        if not title_tag:
            continue
        shop_name = title_tag.get_text(strip=True)

        if shop_name not in allowed_shops:
            continue

        shops[shop_name] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
        ul = block.find("ul")
        if not ul:
            continue
        for li in ul.find_all("li"):
            span = li.find("span")
            if not span:
                continue
            name_part = span.find(text=True, recursive=False)
            qty_part = span.find("span", class_="text-gray-400")
            if name_part and qty_part:
                name = name_part.strip()
                qty_text = qty_part.get_text().strip()
                qty = qty_text.replace('x', '').replace(' ', '')
                try:
                    amount = int(qty) if qty.isdigit() else qty
                except ValueError:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ '{qty}' –≤ —á–∏—Å–ª–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{name}' –≤ –º–∞–≥–∞–∑–∏–Ω–µ '{shop_name}'. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'.")
                    amount = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                shops[shop_name][name] = amount  # –î–æ–±–∞–≤–ª—è–µ–º –≤ shop

    return shops  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    dp.include_router(router)

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä StockFileHandler *–¥–æ* –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    event_handler = StockFileHandler(bot)

    observer = Observer()
    observer.schedule(event_handler, path=".", recursive=False)
    observer.start()

    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    finally:
        observer.stop()
        await observer.join()

if __name__ == "__main__":
    asyncio.run(main())